#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: contour
  namespace: tanzu-user-managed-packages
  annotations:
    kapp.k14s.io/change-group: "contour"
    kapp.k14s.io/change-rule.create-order: "upsert after upserting cert-manager"
    kapp.k14s.io/change-rule.delete-order: "delete before deleting tanzu-ingress/rbac"
spec:
  packageRef:
    refName: contour.tanzu.vmware.com
    versionSelection:
      constraints: 1.22.3+vmware.1-tkg.1
  serviceAccountName: ingress-sa
  values:
  - secretRef:
      name: contour-tanzu-user-managed-packages-values
---
#@ def contour_config():
  namespace: tanzu-system-ingress
  contour:
    configFileContents: {}
    useProxyProtocol: false
    replicas: 2
    pspNames: "vmware-system-restricted"
    logLevel: info
  envoy:
    service:
      type: LoadBalancer
      externalTrafficPolicy: Cluster
      annotations:
        oci.oraclecloud.com/load-balancer-type: "lb"
        service.beta.kubernetes.io/oci-load-balancer-security-list-management-mode: "All"
        service.beta.kubernetes.io/oci-load-balancer-internal: "false"
      nodePorts:
        http: null
        https: null
      disableWait: false
    hostPorts:
      enable: true
      http: 80
      https: 443
    hostNetwork: false
    terminationGracePeriodSeconds: 300
    logLevel: info
    pspNames: null
  certificates:
    duration: 8760h
    renewBefore: 360h
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: contour-tanzu-user-managed-packages-values
  namespace: tanzu-user-managed-packages
  annotations:
    kapp.k14s.io/change-group: "tanzu-ingress/rbac"
stringData:
  contour-data-values.yml: #@ yaml.encode(contour_config())
