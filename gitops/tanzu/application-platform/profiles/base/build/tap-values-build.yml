#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
---
#@ def config():
profile: build

excluded_packages:
  - cert-manager.tanzu.vmware.com
  - contour.tanzu.vmware.com
  #! EKS clusters auto-deploy Crossplane with k8s, helm and AWS providers
  #@ if data.values.tap.cluster.provider == "eks":
  - crossplane.tanzu.vmware.com
  #@ end

ceip_policy_disclosed: true

tap_telemetry:
  installed_for_vmware_internal_use: "true"

shared:
  ingress_domain: #@ data.values.tap.domains.main
  ingress_issuer: #@ data.values.tap.cluster.issuerRef.name

buildservice:
  kp_default_repository: #@ "{}/{}".format(data.values.tap.credentials.registry.host, data.values.tap.registry.repositories.buildService)
  #@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws") and (data.values.tap.credentials.registry.host).find(".dkr.ecr.") > -1:
  kp_default_repository_aws_iam_role_arn: #@ data.values.tap.registry.repositories.aws.iam_role_arn
  #@ else:
  kp_default_repository_username: #@ data.values.tap.credentials.registry.username
  kp_default_repository_password: #@ data.values.tap.credentials.registry.password
  #@ end
  exclude_dependencies: true
  stack_configuration: #@ data.values.tap.stack_configuration

#! supply_chain can be configured to be either [ basic, testing_scanning ]
supply_chain: testing_scanning

#@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws") and (data.values.tap.credentials.registry.host).find(".dkr.ecr.") > -1:
#! Enable the config writer service to use cloud based iaas authentication
#! which are retrieved from the developer namespace service account by default
ootb_templates:
  iaas_auth: true
#@ end

ootb_supply_chain_basic:
  supported_workloads:
  - type: web
    cluster_config_template_name: config-template
  - type: server
    cluster_config_template_name: server-template
  - type: server-fixed
    cluster_config_template_name: server-template-fix
  - type: worker
    cluster_config_template_name: worker-template

  cluster_builder: #@ data.values.tap.supply_chain.cluster_builder
  registry:
    server: #@ data.values.tap.credentials.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  #@ if data.values.tap.supply_chain.gitops.enabled == "true":
  external_delivery: true
  gitops:
    ssh_secret: #@ data.values.tap.supply_chain.gitops.ssh_secret
    repository_owner: #@ data.values.tap.supply_chain.gitops.repository.owner
    repository_name: #@ data.values.tap.supply_chain.gitops.repository.name
    server_address: #@ "https://{}/".format(data.values.tap.supply_chain.gitops.provider)
    branch:  #@ data.values.tap.supply_chain.gitops.repository.branch
    commit_strategy: pull_request
    pull_request:
      server_kind: github
      commit_branch: ""
      pull_request_title: "PR"
      pull_request_body: "Generated by TAP Basic Supply Chain"
  #@ end
  git_implementation: #@ data.values.tap.supply_chain.git_implementation

ootb_supply_chain_testing_scanning:
  supported_workloads:
  - type: web
    cluster_config_template_name: config-template
  - type: server
    cluster_config_template_name: server-template
  - type: server-fixed
    cluster_config_template_name: server-template-fix
  - type: worker
    cluster_config_template_name: worker-template

  cluster_builder: #@ data.values.tap.supply_chain.cluster_builder
  registry:
    server: #@ data.values.tap.credentials.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  #@ if data.values.tap.supply_chain.gitops.enabled == "true":
  external_delivery: true
  gitops:
    ssh_secret: #@ data.values.tap.supply_chain.gitops.ssh_secret
    repository_owner: #@ data.values.tap.supply_chain.gitops.repository.owner
    repository_name: #@ data.values.tap.supply_chain.gitops.repository.name
    server_address: #@ "https://{}/".format(data.values.tap.supply_chain.gitops.provider)
    branch:  #@ data.values.tap.supply_chain.gitops.repository.branch
    commit_strategy: pull_request
    pull_request:
      server_kind: github
      commit_branch: ""
      pull_request_title: "PR"
      pull_request_body: "Generated by TAP Testing and Scanning Supply Chain"
  #@ end
  git_implementation: #@ data.values.tap.supply_chain.git_implementation

scanning:
  certIssuer: selfsigned-cluster-issuer


metadata_store:
  ingress_enabled: "true"
  ns_for_export_app_cert: #@ data.values.tap.devNamespace
  app_service_type: ClusterIP

grype:
  namespace: #@ data.values.tap.devNamespace
  #@ if ((data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws") and (data.values.tap.credentials.registry.host).find(".dkr.ecr.") > -1) == False:
  targetImagePullSecret: "container-registry-credentials"
  #@ end
  targetSourceSshSecret: #@ data.values.tap.supply_chain.gitops.ssh_secret
  metadataStore:
    url: #@ "{}.{}".format("https://metadata-store", data.values.tap.domains.main)
    caSecret:
      name: store-ca-cert
      importFromNamespace: metadata-store-secrets
    authSecret:
      name: store-auth-token
      importFromNamespace: metadata-store-secrets

image_policy_webhook:
  allow_unmatched_images: true
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-values
  namespace: #@ data.values.tap.namespace
type: Opaque
stringData:
  values.yml: #@ yaml.encode(config())
