#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
---
#@ def config():
profile: iterate

excluded_packages:
  - cert-manager.tanzu.vmware.com
  - contour.tanzu.vmware.com

#! installed_for_vmware_internal_use: "true"
ceip_policy_disclosed: true

shared:
  ingress_domain: #@ data.values.tap.domains.main
  ingress_issuer: #@ data.values.tap.cluster.issuerRef.name

buildservice:
  kp_default_repository: #@ "{}/{}".format(data.values.tap.credentials.registry.host, data.values.tap.registry.repositories.buildService)
  #@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws") and (data.values.tap.credentials.registry.host).find(".dkr.ecr.") > -1:
  kp_default_repository_aws_iam_role_arn: #@ data.values.tap.registry.repositories.aws.iam_role_arn
  #@ else:
  kp_default_repository_username: #@ data.values.tap.credentials.registry.username
  kp_default_repository_password: #@ data.values.tap.credentials.registry.password
  #@ end
  tanzunet_username: #@ data.values.tap.credentials.tanzuNet.username
  tanzunet_password: #@ data.values.tap.credentials.tanzuNet.password
  exclude_dependencies: true
  stack_configuration: #@ data.values.tap.stack_configuration

#! supply_chain is pinned to basic as we want fast feedback in inner loop development
supply_chain: basic

#@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws") and (data.values.tap.credentials.registry.host).find(".dkr.ecr.") > -1:
#! Enable the config writer service to use cloud based iaas authentication
#! which are retrieved from the developer namespace service account by default
ootb_templates:
  iaas_auth: true
#@ end

ootb_supply_chain_basic:
  cluster_builder: full
  registry:
    server: #@ data.values.tap.credentials.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: #@ data.values.tap.supply_chain.gitops.ssh_secret

scanning:
  metadataStore:
    url: ""

metadata_store:
  ns_for_export_app_cert: #@ data.values.tap.devNamespace
  app_service_type: ClusterIP

image_policy_webhook:
  allow_unmatched_tags: true

contour:
  #@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws"):
  infrastructure_provider: aws
  #@ end
  envoy:
    service:
      #@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws"):
      aws:
        LBType: nlb
      #@ else:
      type: LoadBalancer
      #@ end

cnrs:
  default_tls_secret: #@ "{}/{}".format(data.values.tap.ingress.contour_tls_namespace, data.values.tap.ingress.contour_tls_secret)
  domain_name: #@ data.values.tap.domains.knative
  domain_template: "{{.Name}}.{{.Domain}}"
  ingress:
    internal:
      namespace: tanzu-system-ingress
    external:
      namespace: tanzu-system-ingress

appliveview_connector:
  backend:
    sslDeactivated: false
    ingressEnabled: true
    host: #@ "appliveview.{}".format(data.values.tap.domains.main)

#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-values
  namespace: #@ data.values.tap.namespace
type: Opaque
stringData:
  values.yml: #@ yaml.encode(config())
