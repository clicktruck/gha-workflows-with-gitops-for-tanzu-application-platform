#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
---
#@ def config():
profile: full

excluded_packages:
  - cert-manager.tanzu.vmware.com
  - contour.tanzu.vmware.com
  #! EKS clusters auto-deploy Crossplane with k8s, helm and AWS providers
  #@ if data.values.tap.cluster.provider == "eks":
  - crossplane.tanzu.vmware.com
  #@ end

#! installed_for_vmware_internal_use: "true"
ceip_policy_disclosed: true

shared:
  ingress_domain: #@ data.values.tap.domains.main
  ingress_issuer: #@ data.values.tap.cluster.issuerRef.name

accelerator:
  domain:  #@ data.values.tap.domains.main
  ingress:
    include: true
  server:
    service_type: ClusterIP
  tls:
    namespace: #@ data.values.tap.ingress.contour_tls_namespace
    secret_name: #@ data.values.tap.ingress.contour_tls_secret

appliveview:
  tls:
    namespace: #@ data.values.tap.ingress.contour_tls_namespace
    secretName: #@ data.values.tap.ingress.contour_tls_secret

buildservice:
  kp_default_repository: #@ "{}/{}".format(data.values.tap.credentials.registry.host, data.values.tap.registry.repositories.buildService)
  #@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws") and (data.values.tap.credentials.registry.host).find(".dkr.ecr.") > -1:
  kp_default_repository_aws_iam_role_arn: #@ data.values.tap.registry.repositories.aws.iam_role_arn
  #@ else:
  kp_default_repository_username: #@ data.values.tap.credentials.registry.username
  kp_default_repository_password: #@ data.values.tap.credentials.registry.password
  #@ end
  exclude_dependencies: true
  stack_configuration: #@ data.values.tap.stack_configuration

#! supply_chain can be configured to be either [ basic, testing_scanning ]
supply_chain: testing_scanning

#@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws") and (data.values.tap.credentials.registry.host).find(".dkr.ecr.") > -1:
#! Enable the config writer service to use cloud based iaas authentication
#! which are retrieved from the developer namespace service account by default
ootb_templates:
  iaas_auth: true
#@ end

ootb_supply_chain_basic:
  cluster_builder: #@ data.values.tap.supply_chain.cluster_builder
  registry:
    server: #@ data.values.tap.credentials.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  #@ if data.values.tap.supply_chain.gitops.enabled == "true":
  external_delivery: true
  gitops:
    ssh_secret: #@ data.values.tap.supply_chain.gitops.ssh_secret
    repository_owner: #@ data.values.tap.supply_chain.gitops.repository.owner
    repository_name: #@ data.values.tap.supply_chain.gitops.repository.name
    server_address: #@ "https://{}/".format(data.values.tap.supply_chain.gitops.provider)
    branch:  #@ data.values.tap.supply_chain.gitops.repository.branch
    commit_strategy: pull_request
    pull_request:
      server_kind: github
      commit_branch: ""
      pull_request_title: "PR"
      pull_request_body: "Generated by TAP Basic Supply Chain"
  #@ end
  git_implementation: #@ data.values.tap.supply_chain.git_implementation

ootb_supply_chain_testing_scanning:
  cluster_builder: #@ data.values.tap.supply_chain.cluster_builder
  registry:
    server: #@ data.values.tap.credentials.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  #@ if data.values.tap.supply_chain.gitops.enabled == "true":
  external_delivery: true
  gitops:
    ssh_secret: #@ data.values.tap.supply_chain.gitops.ssh_secret
    repository_owner: #@ data.values.tap.supply_chain.gitops.repository.owner
    repository_name: #@ data.values.tap.supply_chain.gitops.repository.name
    server_address: #@ "https://{}/".format(data.values.tap.supply_chain.gitops.provider)
    branch:  #@ data.values.tap.supply_chain.gitops.repository.branch
    commit_strategy: pull_request
    pull_request:
      server_kind: github
      commit_branch: ""
      pull_request_title: "PR"
      pull_request_body: "Generated by TAP Testing and Scanning Supply Chain"
  #@ end
  git_implementation: #@ data.values.tap.supply_chain.git_implementation

learningcenter:
  ingressClass: "contour"
  ingressDomain: #@ data.values.tap.domains.learningCenter
  ingressSecret:
    secretName: #@ data.values.tap.ingress.contour_tls_secret

tap_gui:
  service_type: ClusterIP
  ingressEnabled: "true"
  ingressDomain: #@ data.values.tap.domains.main
  tls:
    namespace: #@ data.values.tap.ingress.contour_tls_namespace
    secretName: #@ data.values.tap.ingress.contour_tls_secret
  app_config:
    app:
      baseUrl: #@ "https://{}".format(data.values.tap.domains.tapGui)
    integrations:
      #@ if data.values.tap.credentials.git.host == "github.com" and data.values.tap.credentials.git.token != "":
      github:
      - host: github.com
        token: #@ data.values.tap.credentials.git.token
      #@ end
    catalog:
      locations:
      #@ for catalog in data.values.tap.catalogs:
      - type: url
        target: #@ catalog
      #@ end
    backend:
      baseUrl: #@ "https://{}".format(data.values.tap.domains.tapGui)
      cors:
        origin: #@ "https://{}".format(data.values.tap.domains.tapGui)
      #@ if "backstage" in data.values.tap.credentials and "database" in data.values.tap.credentials.backstage:
      backend:
        database:
          client: #@ data.values.tap.credentials.backstage.database.client
          connection:
            host: #@ data.values.tap.credentials.backstage.database.host
            port: #@ data.values.tap.credentials.backstage.database.port
            user: #@ data.values.tap.credentials.backstage.database.username
            password: #@ data.values.tap.credentials.backstage.database.password
            ssl: {rejectUnauthorized: true}
      #@ end
    #! Add proxy for accessing metadata store from the UI for CVE results
    proxy:
      /metadata-store:
        target: https://metadata-store-app.metadata-store:8443/api/v1
        changeOrigin: true
        secure: false
        headers:
          Authorization: #@ "Bearer {}".format(data.values.tap.gui.proxy.metadata_store.token)
          X-Custom-Source: project-star
    #@ if data.values.tap.credentials.oidc.provider == "github" and data.values.tap.credentials.oidc.client_id != "" and data.values.tap.credentials.oidc.client_secret != "":
    auth:
      environment: development
      providers:
        github:
          development:
            clientId: #@ data.values.tap.credentials.oidc.client_id
            clientSecret: #@ data.values.tap.credentials.oidc.client_secret
      loginPage:
        github:
          title: Github Login
          message: Login with your GitHub account
    #@ end

scanning:
  metadataStore:
    url: ""

metadata_store:
  ns_for_export_app_cert: "*"
  app_service_type: ClusterIP

grype:
  namespace: #@ data.values.tap.devNamespace
  #@ if ((data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws") and (data.values.tap.credentials.registry.host).find(".dkr.ecr.") > -1) == False:
  targetImagePullSecret: "container-registry-credentials"
  #@ end
  targetSourceSshSecret: #@ data.values.tap.supply_chain.gitops.ssh_secret

image_policy_webhook:
  allow_unmatched_tags: true

contour:
  #@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws"):
  infrastructure_provider: aws
  #@ end
  envoy:
    service:
      #@ if (data.values.tap.cluster.provider == "eks" or data.values.tap.cluster.provider == "tkg»aws"):
      aws:
        LBType: nlb
      #@ else:
      type: LoadBalancer
      #@ end

cnrs:
  default_tls_secret: #@ "{}/{}".format(data.values.tap.ingress.contour_tls_namespace, data.values.tap.ingress.contour_tls_secret)
  domain_name: #@ data.values.tap.domains.knative
  domain_template: "{{.Name}}.{{.Domain}}"
  ingress:
    internal:
      namespace: tanzu-system-ingress
    external:
      namespace: tanzu-system-ingress

package_overlays:
- name:  learningcenter
  secrets:
  - name: learningcenter-config-overlay

#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-values
  namespace: #@ data.values.tap.namespace
type: Opaque
stringData:
  values.yml: #@ yaml.encode(config())
