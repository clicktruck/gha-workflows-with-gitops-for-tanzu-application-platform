name: "azure-04-administer-main-dns-zone"

on:
  workflow_call:
    inputs:
      domain:
        description: "new DNS zone name to create (e.g., example.com)"
        required: true
        type: string
      resourceGroupName:
        description: "the resource group to provision the main DNS zone in"
        required: true
        type: string
      action:
        required: true
        type: string
        description: "Create (new) or destroy (existing)"
    secrets:
      AZURE_AD_CLIENT_ID:
        required: true
      AZURE_AD_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_AD_TENANT_ID:
        required: true
      TF_BACKEND_RESOURCE_GROUP_NAME:
        required: true
      TF_BACKEND_STORAGE_ACCOUNT_NAME:
        required: true
      TF_BACKEND_STORAGE_CONTAINER_NAME:
        required: true

jobs:
  terraform:
    env:
      #Azure connection vars for TF
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}

      TF_VAR_domain: ${{ inputs.domain }}
      TF_VAR_resource_group_name: ${{ inputs.resourceGroupName }}

    runs-on: ubuntu-22.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-22.04, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/azure/main-dns

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.2

    - name: Generate backend configuration
      run: |
          cp ../backend/backend.tf .
          echo "resource_group_name = \"${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}\"" > config.azurerm.tfbackend
          echo "storage_account_name = \"${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}\"" >> config.azurerm.tfbackend
          echo "container_name = \"${{ secrets.TF_BACKEND_STORAGE_CONTAINER_NAME }}\"" >> config.azurerm.tfbackend
          echo "key = \"${{ inputs.resourceGroupName }}.dns.${{ inputs.domain }}.tfstate\"" >> config.azurerm.tfbackend

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -upgrade -backend-config=./config.azurerm.tfbackend

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action == 'create'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action == 'create'
      run: terraform apply -auto-approve

    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve
