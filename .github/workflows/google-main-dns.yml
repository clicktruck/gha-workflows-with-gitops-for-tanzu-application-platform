name: "google-administer-main-dns-zone"

on:
  workflow_call:
    inputs:
      domain:
        description: "New DNS zone name to create (e.g., example.com)"
        required: true
        type: string
      action:
        required: true
        type: string
        description: "Create (new) or destroy (existing)"
    secrets:
      GOOGLE_PROJECT_ID:
        required: true
      GOOGLE_SERVICE_ACCOUNT_KEY:
        required: true
      TF_BACKEND_GCS_BUCKET_NAME:
        required: true
      GOOGLE_KMS_KEYRING:
        required: true
    outputs:
      zone_name:
        description: "The Google Cloud DNS Zone name hosting the base domain"
        value: ${{ jobs.terraform.outputs.zone_name }}

jobs:
  terraform:
    env:
      GOOGLE_APPLICATION_CREDENTIALS: "/tmp/gcloud/sa.json"
      TF_VAR_project: ${{ secrets.GOOGLE_PROJECT_ID }}
      TF_VAR_root_domain: ${{ inputs.domain }}

    runs-on: ubuntu-20.04

    outputs:
      zone_name: ${{ steps.set_outputs.outputs.zone_name }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-20.04, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/google/main-dns

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Generate backend configuration
      run: |
        cp ../backend/backend.tf .
        echo "bucket = \"${{ secrets.TF_BACKEND_GCS_BUCKET_NAME }}\"" > config.gcs.tfbackend
        echo "prefix = \"main-dns\"" >> config.gcs.tfbackend

    - name: Decrypt service account keyfile contents and write to /tmp/gcloud/sa.json
      env:
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      run: |
        mkdir -p /tmp/gcloud
        echo "$GOOGLE_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcloud/sa.json
        chmod 600 /tmp/gcloud/sa.json

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -upgrade -backend-config=./config.gcs.tfbackend

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action == 'create'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action == 'create'
      run: terraform apply -auto-approve

    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve

    - name: Set Outputs
      id: set_outputs
      run: |
        zone_name=$(terraform output --raw zone_name)
        echo "zone_name=${zone_name}" >> $GITHUB_OUTPUT
