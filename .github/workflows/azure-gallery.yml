name: "azure-08d-create-shared-image-gallery-and-image-definition"

on:
  workflow_call:
    inputs:
      resourceGroupName:
        description: "The name of an existing resource group"
        required: true
        type: string
      imageName:
        description: "Name of the image definition to create for the bastion image"
        required: true
        type: string
      galleryName:
        description: "Name of the gallery"
        required: true
        type: string
      imagePublisher:
        description: "Publisher name for the image definition"
        required: true
        type: string
      imageOffer:
        description: "Offer name for the image definition"
        required: true
        type: string
      imageSku:
        description: "SKU name for the image definition"
        required: true
        type: string
      action:
        required: true
        type: string
        description: "Create (new) or destroy (existing)"
    secrets:
      AZURE_AD_CLIENT_ID:
        required: true
      AZURE_AD_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_AD_TENANT_ID:
        required: true
      AZURE_REGION:
        required: true
      TF_BACKEND_resource_group_name:
        required: true
      TF_BACKEND_storage_account_name:
        required: true
      TF_BACKEND_storage_container_name:
        required: true
    outputs:
      gallery_name:
        value: ${{ jobs.terraform.outputs.gallery_name }}
      image_name:
        value: ${{ jobs.terraform.outputs.image_name }}
      image_sku:
        value: ${{ jobs.terraform.outputs.image_sku }}
      image_offer:
        value: ${{ jobs.terraform.outputs.image_offer }}
      image_publisher:
        value: ${{ jobs.terraform.outputs.image_publisher }}

jobs:
  terraform:
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_VAR_resource_group_name: ${{ inputs.resourceGroupName }}
      TF_VAR_gallery_name: ${{ inputs.galleryName }}
      TF_VAR_image_name: ${{ inputs.imageName }}
      TF_VAR_image_sku: ${{ inputs.imageSku }}
      TF_VAR_image_offer: ${{ inputs.imageOffer }}
      TF_VAR_image_publisher: ${{ inputs.imagePublisher }}
    runs-on: ubuntu-20.04

    outputs:
      gallery_name: ${{ steps.set_outputs.outputs.gallery_name }}
      image_name: ${{ steps.set_outputs.outputs.image_name }}
      image_sku: ${{ steps.set_outputs.outputs.image_sku }}
      image_offer: ${{ steps.set_outputs.outputs.image_offer }}
      image_publisher: ${{ steps.set_outputs.outputs.image_publisher }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-20.04, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/azure/compute-gallery

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
        terraform_version: 1.3.7

    - name: Generate backend configuration
      run: |
          cp ../backend/backend.tf .
          echo "resource_group_name = \"${{ secrets.TF_BACKEND_resource_group_name }}\"" > config.azurerm.tfbackend
          echo "storage_account_name = \"${{ secrets.TF_BACKEND_storage_account_name }}\"" >> config.azurerm.tfbackend
          echo "container_name = \"${{ secrets.TF_BACKEND_storage_container_name }}\"" >> config.azurerm.tfbackend
          echo "key = \"${{ inputs.resourceGroupName }}.gallery.tfstate\"" >> config.azurerm.tfbackend

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -upgrade -backend-config=./config.azurerm.tfbackend

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action == 'create'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action == 'create'
      run: terraform apply -auto-approve

    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve

    - name: Set Outputs
      id: set_outputs
      if: inputs.action == 'create'
      run: |
        gallery_name=$(terraform output --raw gallery_name)
        echo "gallery_name=${gallery_name}" >> $GITHUB_OUTPUT
        image_name=$(terraform output --raw image_name)
        echo "image_name=${image_name}" >> $GITHUB_OUTPUT
        image_sku=$(terraform output --raw image_sku)
        echo "image_sku=${image_sku}" >> $GITHUB_OUTPUT
        image_offer=$(terraform output --raw image_offer)
        echo "image_offer=${image_offer}" >> $GITHUB_OUTPUT
        image_publisher=$(terraform output --raw image_publisher)
        echo "image_publisher=${image_publisher}" >> $GITHUB_OUTPUT
