name: "google-administer-remote-backend-for-terraform-state"

on:
  workflow_call:
    inputs:
      bucket-name:
        description: "The Google Cloud storage bucket name used for Terraform state."
        type: string
        required: true
      region:
        description: "The Google Cloud region where the bucket will be created to manage Terraform state"
        type: string
        required: true
      action:
        required: true
        type: string
        description: "Create (new) or destroy (existing)"
    secrets:
      GOOGLE_PROJECT_ID:
        required: true
      GOOGLE_SERVICE_ACCOUNT_KEY:
        required: true
      PA_TOKEN:
        required: true
      GOOGLE_KMS_KEYRING:
        # Change back to true when this open issue is addressed: https://github.com/hashicorp/terraform/issues/24967.
        required: false

jobs:
  create-backend-storage:
    if: inputs.action == 'create'
    env:
      GOOGLE_APPLICATION_CREDENTIALS: "/tmp/gcloud/sa.json"
      TF_VAR_project: ${{ secrets.GOOGLE_PROJECT_ID }}
      TF_VAR_bucket_name: ${{ inputs.bucket-name }}
      TF_VAR_location: ${{ inputs.region }}
      # Uncomment when this open issue is addressed: https://github.com/hashicorp/terraform/issues/24967.
      #TF_VAR_keyring: ${{ secrets.GOOGLE_KMS_KEYRING }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-22.04, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/google/tfstate-support

    runs-on: ubuntu-22.04

    outputs:
      provisioned_bucket_name: ${{ steps.set_outputs.outputs.provisioned_bucket_name }}

    steps:
    - name: Checkout
      if: inputs.action == 'create'
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      if: inputs.action == 'create'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
        terraform_version: 1.4.6

    - name: Decrypt service account keyfile contents and write to /tmp/gcloud/sa.json
      env:
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      run: |
        mkdir -p /tmp/gcloud
        echo "$GOOGLE_SERVICE_ACCOUNT_KEY" | base64 -d > /tmp/gcloud/sa.json
        chmod 600 /tmp/gcloud/sa.json

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      if: inputs.action == 'create'
      run: terraform init -upgrade

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      if: inputs.action == 'create'
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action == 'create'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action == 'create'
      run: terraform apply -auto-approve

    - name: Set Outputs
      id: set_outputs
      if: inputs.action == 'create'
      run: |
        provisioned_bucket_name=$(terraform output --raw provisioned_bucket_name)
        echo "provisioned_bucket_name=${provisioned_bucket_name}" >> $GITHUB_OUTPUT

  add-github-secret:
    if: inputs.action == 'create'
    needs: create-backend-storage
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Add Google container storage bucket name as secret
      env:
        GITHUB_TOKEN: ${{ secrets.PA_TOKEN }}
      run: |
        gh secret set TF_BACKEND_GCS_BUCKET_NAME --body ${{ needs.create-backend-storage.outputs.provisioned_bucket_name }}

  destroy-backend-storage:
    if: inputs.action == 'destroy'
    runs-on: ubuntu-22.04

    steps:
    - uses: actions-hub/gcloud@master
      name: "Destroy Google Cloud storage bucket used for Terraform state"
      if: inputs.action == 'destroy'
      env:
        PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      with:
        cli: gsutil
        args: rm -r gs://${{ inputs.bucket-name }}
