name: "install-tanzu-application-platform"

on:
  workflow_call:
    inputs:
      domain:
        description: "A domain that the installation of TAP will be addressable from"
        type: string
        required: true
      email-address:
        description: "An email address to be used as the owner for the public trusted domain certificate vended by Let's Encrypt"
        type: string
        required: true
      dev-namespace:
        description: "A namespace that will accommodate Workloads"
        type: string
        required: true
      backstage-catalog:
        description: "A Git repository and path to a Backstage catalog file"
        type: string
        required: true
      container-image-registry-url:
        description: "The container registry that will host the packages and images for the installation"
        type: string
        required: true
      ootb-supply-chain-repo:
        description: "Out-of-the-box supply chain container image registry repository name"
        type: string
        required: true
      build-service-repo:
        description: "Tanzu Build Service container image registry repository name"
        type: string
        required: true
      target-repo:
        description: "The source repository within the container image registry where Tanzu Application Platform install packages are found"
        type: string
        required: true
      build-service-repo-aws-iam-role-arn:
        description: "IAM role ARN for pull-push access to container image registry"
        type: string
        required: false
        default: ""
      workload-repo-aws-iam-role-arn:
        description: "IAM role ARN for pull-push access to container image registry"
        type: string
        required: false
        default: ""
      container-image-registry-username:
        description: "The container registry's admin account username"
        type: string
        required: true
      container-image-registry-password:
        description: "The container registry's admin account password"
        type: string
        required: true
      cluster-provider:
        description: "The Kubernetes service provider"
        type: string
        required: true
      deployment-name:
        description: "The name you want to give this deployment. (It will be suffixed with the active-profile)."
        type: string
        required: true
      active-profile:
        description: "The TAP profile to be installed"
        type: string
        required: true
      aws-region:
        description: "An existing AWS region consumed by ClusterIssuer DNS solver configuration"
        type: string
        required: false
      azure-resource-group:
        description: "An existing Azure resource group name consumed by ClusterIssuer DNS solver configuration"
        type: string
        required: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_SESSION_TOKEN:
        required: false
      ROUTE53_ZONE_AWS_ACCESS_KEY_ID:
        required: false
      ROUTE53_ZONE_AWS_SECRET_ACCESS_KEY:
        required: false
      AZURE_AD_CLIENT_ID:
        required: false
      AZURE_AD_CLIENT_SECRET:
        required: false
      AZURE_SUBSCRIPTION_ID:
        required: false
      AZURE_AD_TENANT_ID:
        required: false
      GOOGLE_PROJECT_ID:
        required: false
      GOOGLE_SERVICE_ACCOUNT_KEY:
        required: false
      KUBECONFIG_CONTENTS:
        required: true
      PA_TOKEN:
        required: true
      CSP_API_TOKEN:
        required: true
      OIDC_AUTH_PROVIDER:
        required: false
      OIDC_AUTH_CLIENT_ID:
        required: false
      OIDC_AUTH_CLIENT_SECRET:
        required: false
      TANZU_NETWORK_USERNAME:
        required: true
      TANZU_NETWORK_PASSWORD:
        required: true

jobs:

  fetch-route53-hosted-zone-id:
    if: contains(fromJson('["eks","tkg»aws"]'), inputs.cluster-provider)
    uses: ./.github/workflows/aws-get-route53-hosted-zone-id-for-domain.yml
    with:
      domain: ${{ inputs.domain }}
      region: ${{ inputs.aws-region }}
    secrets:
      ROUTE53_ZONE_AWS_ACCESS_KEY_ID: ${{ secrets.ROUTE53_ZONE_AWS_ACCESS_KEY_ID }}
      ROUTE53_ZONE_AWS_SECRET_ACCESS_KEY: ${{ secrets.ROUTE53_ZONE_AWS_SECRET_ACCESS_KEY }}

  fetch-google-cloud-dns-zone-name:
    if: inputs.cluster-provider == 'gke'
    uses: ./.github/workflows/google-get-clouddns-zone-for-domain.yml
    with:
      domain: ${{ inputs.domain }}
    secrets:
      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
      GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

  install-tanzu-ingress-into-tap-cluster-on-aws:
    needs: fetch-route53-hosted-zone-id
    uses: ./.github/workflows/install-tanzu-ingress.yml
    with:
      target-cloud: "aws"
      domain: ${{ inputs.domain }}
      email-address: ${{ inputs.email-address }}
      aws-region: ${{ inputs.aws-region }}
      aws-route53-hosted-zone-id: ${{ needs.fetch-route53-hosted-zone-id.outputs.hosted_zone_id }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      ROUTE53_ZONE_AWS_ACCESS_KEY_ID: ${{ secrets.ROUTE53_ZONE_AWS_ACCESS_KEY_ID }}
      ROUTE53_ZONE_AWS_SECRET_ACCESS_KEY: ${{ secrets.ROUTE53_ZONE_AWS_SECRET_ACCESS_KEY }}
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      KUBECONFIG_CONTENTS: ${{ secrets.KUBECONFIG_CONTENTS }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}

  install-tanzu-ingress-into-tap-cluster-on-azure:
    if: contains(fromJson('["aks","tkg»azure"]'), inputs.cluster-provider)
    uses: ./.github/workflows/install-tanzu-ingress.yml
    with:
      target-cloud: "azure"
      domain: ${{ inputs.domain }}
      email-address: ${{ inputs.email-address }}
      azure-resource-group: ${{ inputs.azure-resource-group }}
    secrets:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_AD_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      AZURE_AD_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      AZURE_AD_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      KUBECONFIG_CONTENTS: ${{ secrets.KUBECONFIG_CONTENTS }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}

  install-tanzu-ingress-into-tap-cluster-on-google:
    needs: fetch-google-cloud-dns-zone-name
    uses: ./.github/workflows/install-tanzu-ingress.yml
    with:
      target-cloud: "google"
      domain: ${{ inputs.domain }}
      google-cloud-dns-zone-name: ${{ needs.fetch-google-cloud-dns-zone-name.outputs.zone_name }}
      email-address: ${{ inputs.email-address }}
    secrets:
      GOOGLE_PROJECT_ID: ${{ secrets.GOOGLE_PROJECT_ID }}
      GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      KUBECONFIG_CONTENTS: ${{ secrets.KUBECONFIG_CONTENTS }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}

  encode-tanzu-application-platform-install-script:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    outputs:
      result: ${{ steps.encode.outputs.result }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Encode
      id: encode
      run: |
        result="$(cat scripts/install-package.sh | base64 -w 0)"
        echo "result=${result}" >> $GITHUB_OUTPUT

  encode-observe-clusters-script:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    outputs:
      result: ${{ steps.encode.outputs.result }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Encode
      id: encode
      run: |
        result="$(cat scripts/observe-clusters.sh | base64 -w 0)"
        echo "result=${result}" >> $GITHUB_OUTPUT

  install:
    needs: [install-tanzu-ingress-into-tap-cluster-on-aws,install-tanzu-ingress-into-tap-cluster-on-azure,install-tanzu-ingress-into-tap-cluster-on-google,encode-tanzu-application-platform-install-script,encode-observe-clusters-script]
    if: always()
    runs-on: ubuntu-22.04

    env:
      GITOPS_DIR: gitops/tanzu/application-platform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-22.04, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    ## We'll likely source manufactured sensitive data like domain, private registry credentials from a secrets management store like AWS Secrets Manager or Azure KeyVault

    - name: Render git-secrets
      uses: chuhlomin/render-template@v1.9
      with:
        template:  ${{ env.GITOPS_DIR }}/.init/git-secrets.tpl
        vars: |
          git_username: ${{ github.repository_owner }}
          git_personal_access_token: ${{ secrets.PA_TOKEN }}
        result_path: ${{ env.GITOPS_DIR }}/.init/git-secrets.yml

    - name: Render tap-install-config
      uses: chuhlomin/render-template@v1.9
      with:
        template: ${{ env.GITOPS_DIR }}/.init/tap-install-config.tpl
        vars: |
          app_name: ${{ inputs.deployment-name }}-${{ inputs.active-profile }}
          cluster_provider: ${{ inputs.cluster-provider }}
          domain: ${{ inputs.domain }}
          dev_namespace: ${{ inputs.dev-namespace }}
          backstage_catalog: ${{ inputs.backstage-catalog }}
          target_repo: ${{ inputs.target-repo }}
          ootb_supply_chain_repo: ${{ inputs.ootb-supply-chain-repo }}
          build_service_repo: ${{ inputs.build-service-repo }}
          build_service_repo_aws_iam_role_arn: ${{ inputs.build-service-repo-aws-iam-role-arn }}
          workload_repo_aws_iam_role_arn: ${{ inputs.workload-repo-aws-iam-role-arn }}
          gitops_provider: "github.com"
          gitops_username: ${{ github.repository_owner }}
          gitops_repo_name: "tap-gitops-depot"
          gitops_repo_branch: "main"
        result_path: ${{ env.GITOPS_DIR }}/.init/tap-install-config.yml

    - name: Render tap-install-secrets
      if: inputs.cluster-provider != 'gke'
      uses: chuhlomin/render-template@v1.9
      env:
        OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
        OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
        OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      with:
        template: ${{ env.GITOPS_DIR }}/.init/tap-install-secrets.tpl
        vars: |
          app_name: ${{ inputs.deployment-name }}-${{ inputs.active-profile }}
          email_address: ${{ inputs.email-address }}
          tanzu_network_username: ${{ secrets.TANZU_NETWORK_USERNAME }}
          tanzu_network_password: ${{ secrets.TANZU_NETWORK_PASSWORD }}
          container_image_registry_url: ${{ inputs.container-image-registry-url }}
          container_image_registry_username: ${{ inputs.container-image-registry-username }}
          container_image_registry_password: ${{ inputs.container-image-registry-password }}
          git_host: github.com
          git_username: ${{ github.repository_owner }}
          git_personal_access_token: ${{ secrets.PA_TOKEN }}
          oidc_auth_provider: "\"${{ env.OIDC_AUTH_PROVIDER }}\""
          oidc_auth_client_id: "\"${{ env.OIDC_AUTH_CLIENT_ID }}\""
          oidc_auth_client_secret: "\"${{ env.OIDC_AUTH_CLIENT_SECRET }}\""
        result_path: ${{ env.GITOPS_DIR }}/.init/tap-install-secrets.yml

    - name: Render tap-install-secrets on GKE
      if: inputs.cluster-provider == 'gke'
      uses: chuhlomin/render-template@v1.9
      env:
        OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
        OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
        OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      with:
        template: ${{ env.GITOPS_DIR }}/.init/tap-install-secrets.tpl
        vars: |
          app_name: ${{ inputs.deployment-name }}-${{ inputs.active-profile }}
          email_address: ${{ inputs.email-address }}
          tanzu_network_username: ${{ secrets.TANZU_NETWORK_USERNAME }}
          tanzu_network_password: ${{ secrets.TANZU_NETWORK_PASSWORD }}
          container_image_registry_url: ${{ inputs.container-image-registry-url }}
          container_image_registry_username: ${{ inputs.container-image-registry-username }}
          container_image_registry_password: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          git_host: github.com
          git_username: ${{ github.repository_owner }}
          git_personal_access_token: ${{ secrets.PA_TOKEN }}
          oidc_auth_provider: "\"${{ env.OIDC_AUTH_PROVIDER }}\""
          oidc_auth_client_id: "\"${{ env.OIDC_AUTH_CLIENT_ID }}\""
          oidc_auth_client_secret: "\"${{ env.OIDC_AUTH_CLIENT_SECRET }}\""
        result_path: ${{ env.GITOPS_DIR }}/.init/tap-install-secrets.yml

    - name: Render tap-install
      uses: chuhlomin/render-template@v1.9
      with:
        template: ${{ env.GITOPS_DIR }}/.install/tap-install.tpl
        vars: |
          app_name: ${{ inputs.deployment-name }}-${{ inputs.active-profile }}
          git_ref_name: ${{ github.ref_name }}
          profile: ${{ inputs.active-profile }}
        result_path: ${{ env.GITOPS_DIR }}/.install/tap-install.yml

    - name: Render tap-post-install
      uses: chuhlomin/render-template@v1.9
      with:
        template: ${{ env.GITOPS_DIR }}/.post-install/tap-post-install.tpl
        vars: |
          app_name: ${{ inputs.deployment-name }}-${{ inputs.active-profile }}
          git_ref_name: ${{ github.ref_name }}
          profile: ${{ inputs.active-profile }}
        result_path: ${{ env.GITOPS_DIR }}/.post-install/tap-post-install.yml

    - name: "Install Tanzu Application Platform on Azure"
      if: contains(fromJson('["aks","tkg»azure"]'), inputs.cluster-provider)
      uses: ./docker/actions/azure/tanzu-runsh-setup-action
      with:
        script-contents: ${{ needs.encode-tanzu-application-platform-install-script.outputs.result }}
        script-arguments: "${{ env.GITOPS_DIR }} ${{ inputs.deployment-name }}-${{ inputs.active-profile }}"
        kubeconfig-contents: ${{ secrets.KUBECONFIG_CONTENTS }}
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azure-tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
        azure-ad-client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
        azure-ad-client-secret: ${{ secrets.AZURE_AD_CLIENT_SECRET }}

    - name: "Install Tanzu Application Platform on AWS"
      if: contains(fromJson('["eks","tkg»aws"]'), inputs.cluster-provider)
      uses: ./docker/actions/aws/tanzu-runsh-setup-action
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        script-contents: ${{ needs.encode-tanzu-application-platform-install-script.outputs.result }}
        script-arguments: "${{ env.GITOPS_DIR }} ${{ inputs.deployment-name }}-${{ inputs.active-profile }}"
        kubeconfig-contents: ${{ secrets.KUBECONFIG_CONTENTS }}
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}

    - name: "Install Tanzu Application Platform on Google"
      if: inputs.cluster-provider == 'gke'
      uses: ./docker/actions/google/tanzu-runsh-setup-action
      with:
        google-project-id: ${{ secrets.GOOGLE_PROJECT_ID }}
        google-service-account-key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        script-contents: ${{ needs.encode-tanzu-application-platform-install-script.outputs.result }}
        script-arguments: "${{ env.GITOPS_DIR }} ${{ inputs.deployment-name }}-${{ inputs.active-profile }}"
        kubeconfig-contents: ${{ secrets.KUBECONFIG_CONTENTS }}
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}
