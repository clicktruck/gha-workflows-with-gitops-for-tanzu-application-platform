name: "install-tanzu-data-services-repo"

on:
  workflow_call:
    inputs:
      tds-version:
        description: "Tanzu Data Services Package Repository version"
        type: string
        required: true
      cluster-provider:
        description: "The Kubernetes service provider"
        type: string
        required: true
    secrets:
      GOOGLE_PROJECT_ID:
        required: false
      GOOGLE_SERVICE_ACCOUNT_KEY:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_SESSION_TOKEN:
        required: false
      TANZU_NETWORK_API_TOKEN:
        required: true
      TANZU_NETWORK_USERNAME:
        required: true
      TANZU_NETWORK_PASSWORD:
        required: true
      GIT_SSH_PRIVATE_KEY:
        required: true
      GIT_SSH_KNOWN_HOSTS:
        required: true
      CSP_API_TOKEN:
        required: true
      KUBECONFIG_CONTENTS:
        required: true

jobs:
  encode-tanzu-data-services-repo-install-script:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    outputs:
      result: ${{ steps.encode.outputs.result }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Encode
      id: encode
      run: |
          result="$(cat scripts/install-package.sh | base64 -w 0)"
          echo "result=${result}" >> $GITHUB_OUTPUT

  install:
    needs: encode-tanzu-data-services-repo-install-script
    runs-on: ubuntu-22.04

    env:
      GITOPS_DIR: gitops/tanzu/data-services

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Render data-services-install-config
      uses: chuhlomin/render-template@v1.6
      with:
        template: ${{ env.GITOPS_DIR }}/.init/data-services-install-config.tpl
        vars: |
          tds_version: ${{ inputs.tds-version }}
        result_path: ${{ env.GITOPS_DIR }}/.init/data-services-install-config.yml

    - name: Render data-services-install-secrets
      uses: chuhlomin/render-template@v1.6
      with:
        template: ${{ env.GITOPS_DIR }}/.init/data-services-install-secrets.tpl
        vars: |
          tanzu_network_username: ${{ secrets.TANZU_NETWORK_USERNAME }}
          tanzu_network_password: ${{ secrets.TANZU_NETWORK_PASSWORD }}
          git_ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
          git_ssh_known_hosts: ${{ secrets.GIT_SSH_KNOWN_HOSTS }}
        result_path: ${{ env.GITOPS_DIR }}/.init/data-services-install-secrets.yml

    - name: Render data-services-install
      uses: chuhlomin/render-template@v1.6
      with:
        template: ${{ env.GITOPS_DIR }}/.install/data-services-install.tpl
        vars: |
          git_ref_name: ${{ github.ref_name }}
        result_path: ${{ env.GITOPS_DIR }}/.install/data-services-install.yml

    - name: "Install Tanzu Data Services Repo on Azure"
      if: inputs.cluster-provider == 'aks'
      uses: ./docker/actions/tanzu-runsh-setup-action
      with:
        script-contents: ${{ needs.encode-tanzu-data-services-repo-install-script.outputs.result }}
        script-arguments: "${{ env.GITOPS_DIR }} tanzu-data-services-repo"
        kubeconfig-contents: "${{ secrets.KUBECONFIG_CONTENTS }}"
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}

    - name: "Install Tanzu Data Services Repo on AWS"
      if: inputs.cluster-provider == 'eks'
      uses: ./docker/actions/aws/tanzu-runsh-setup-action
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        kubeconfig-contents: "${{ secrets.KUBECONFIG_CONTENTS }}"
        script-contents: ${{ needs.encode-tanzu-data-services-repo-install-script.outputs.result }}
        script-arguments: "${{ env.GITOPS_DIR }} tanzu-data-services-repo"
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}

    - name: "Install Tanzu Data Services Repo on GKE"
      if: inputs.cluster-provider == 'gke'
      uses: ./docker/actions/google/tanzu-runsh-setup-action
      with:
        google-project-id: ${{ secrets.GOOGLE_PROJECT_ID }}
        google-service-account-key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        kubeconfig-contents: "${{ secrets.KUBECONFIG_CONTENTS }}"
        script-contents: ${{ needs.encode-tanzu-data-services-repo-install-script.outputs.result }}
        script-arguments: "${{ env.GITOPS_DIR }} tanzu-data-services-repo"
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}
