name: "uninstall-tanzu-application-platform"

on:
  workflow_call:
    inputs:
      cluster-provider:
        description: "The Kubernetes service provider"
        type: string
        required: true
      deployment-name:
        description: "The name of the deployment that will be uninstalled. (Name should be suffixed with profile)."
        type: string
        required: true
      dev-namespaces:
        description: "Pre-existing namespaces that will be removed (ie., workloads and deliverables deleted first)"
        type: string
        required: false
    secrets:
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_SESSION_TOKEN:
        required: false
      GOOGLE_PROJECT_ID:
        required: false
      GOOGLE_SERVICE_ACCOUNT_KEY:
        required: false
      KUBECONFIG_CONTENTS:
        required: true
      CSP_API_TOKEN:
        required: true

jobs:
  encode-delete-workloads-from-dev-namespaces-script:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    outputs:
      result: ${{ steps.encode.outputs.result }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Encode
      id: encode
      run: |
          result="$(cat "scripts/delete-workloads.sh" | base64 -w 0)"
          echo "result=${result}" >> $GITHUB_OUTPUT

  encode-tanzu-application-platform-uninstall-script:
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    outputs:
      result: ${{ steps.encode.outputs.result }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Encode
      id: encode
      run: |
          result="$(cat "scripts/uninstall-package.sh" | base64 -w 0)"
          echo "result=${result}" >> $GITHUB_OUTPUT

  uninstall:
    needs: encode-tanzu-application-platform-uninstall-script
    runs-on: ubuntu-22.04

    env:
      GITOPS_DIR: gitops/tanzu/application-platform

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-22.04, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: "Check if there are workloads in dev namespace(s), then delete them"
      if: inputs.dev-namespaces != '' && contains(fromJson('["eks","gke","tkg»aws"]'), inputs.cluster-provider) != true
      uses: ./docker/actions/tanzu-runsh-setup-action
      with:
        enable-tanzu-cli: "true"
        script-contents: ${{ needs.encode-delete-workloads-from-dev-namespaces-script.outputs.result }}
        script-arguments: "${{ inputs.dev-namespaces }}"
        kubeconfig-contents: "${{ secrets.KUBECONFIG_CONTENTS }}"
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}

    - name: "Check if there are workloads in dev namespace(s), then delete them on EKS"
      if: inputs.dev-namespaces != '' && contains(fromJson('["eks","tkg»aws"]'), inputs.cluster-provider)
      uses: ./docker/actions/aws/tanzu-runsh-setup-action
      with:
        enable-tanzu-cli: "true"
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        script-contents: ${{ needs.encode-delete-workloads-from-dev-namespaces-script.outputs.result }}
        script-arguments: "${{ inputs.dev-namespaces }}"
        kubeconfig-contents: "${{ secrets.KUBECONFIG_CONTENTS }}"
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}

    - name: "Check if there are workloads in dev namespace(s), then delete them on Google"
      if: inputs.dev-namespaces != '' && inputs.cluster-provider == 'gke'
      uses: ./docker/actions/google/tanzu-runsh-setup-action
      with:
        enable-tanzu-cli: "true"
        google-project-id: ${{ secrets.GOOGLE_PROJECT_ID }}
        google-service-account-key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        script-contents: ${{ needs.encode-delete-workloads-from-dev-namespaces-script.outputs.result }}
        script-arguments: "${{ inputs.dev-namespaces }}"
        kubeconfig-contents: "${{ secrets.KUBECONFIG_CONTENTS }}"
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}


    - name: "Uninstall Tanzu Application Platform"
      if: contains(fromJson('["eks","gke","tkg»aws"]'), inputs.cluster-provider) != true
      uses: ./docker/actions/tanzu-runsh-setup-action
      with:
        script-contents: ${{ needs.encode-tanzu-application-platform-uninstall-script.outputs.result }}
        script-arguments: '${{ env.GITOPS_DIR }} ${{ inputs.deployment-name }}'
        kubeconfig-contents: "${{ secrets.KUBECONFIG_CONTENTS }}"
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}

    - name: "Uninstall Tanzu Application Platform on EKS"
      if: contains(fromJson('["eks","tkg»aws"]'), inputs.cluster-provider)
      uses: ./docker/actions/aws/tanzu-runsh-setup-action
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        script-contents: ${{ needs.encode-tanzu-application-platform-uninstall-script.outputs.result }}
        script-arguments: '${{ env.GITOPS_DIR }} ${{ inputs.deployment-name }}'
        kubeconfig-contents: "${{ secrets.KUBECONFIG_CONTENTS }}"
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}

    - name: "Uninstall Tanzu Application Platform on Google"
      if: inputs.cluster-provider == 'gke'
      uses: ./docker/actions/google/tanzu-runsh-setup-action
      with:
        google-project-id: ${{ secrets.GOOGLE_PROJECT_ID }}
        google-service-account-key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        script-contents: ${{ needs.encode-tanzu-application-platform-uninstall-script.outputs.result }}
        script-arguments: "${{ env.GITOPS_DIR }} ${{ inputs.deployment-name }}"
        kubeconfig-contents: "${{ secrets.KUBECONFIG_CONTENTS }}"
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}
