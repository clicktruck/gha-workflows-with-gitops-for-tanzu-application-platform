name: "multi-cluster-tanzu-application-platform-install-on-azure-dispatch"

on:
  workflow_dispatch:
    inputs:
      cluster-provider:
        description: "The Kubernetes service provider"
        type: choice
        required: true
        options:
          - aks
          - tkgÂ»azure
        default: "aks"
      container-image-registry-provider:
        description: "The container image registry provider"
        required: true
        type: choice
        options:
          - azure-container-registry
          - harbor-on-azure
        default: "azure-container-registry"
      secrets-manager-instance-name:
        description: "The name of a Azure Key Vault instance"
        required: true
      domain:
        description: "A domain that the installation of TAP will be addressable from"
        required: true
        default: "foo.com"
      subdomains:
        description: "Comma-separated list of subdomains for each cluster hosting iterate, view, and run TAP profiles"
        required: true
        default: "view,iterate,run"
      email-address:
        description: "An email address to be used as the owner for the public trusted domain certificate vended by Let's Encrypt"
        required: true
      dev-namespace:
        description: "A namespace that will accommodate Workloads"
        required: true
        default: "default"
      backstage-catalog:
        description: "A Git repository and path to a Backstage catalog file"
        required: true

jobs:
  obtain-secrets-from-secrets-manager:
    runs-on: ubuntu-22.04

    outputs:
      container-image-registry-provider: ${{ steps.vars.outputs.container-image-registry-provider }}
      acr-admin-username: ${{ steps.vars.outputs.acr-admin-username }}
      acr-admin-password: ${{ steps.vars.outputs.acr-admin-password }}
      acr-url: ${{ steps.vars.outputs.acr-url }}
      harbor-admin-username: ${{ steps.vars.outputs.harbor-admin-username }}
      harbor-admin-password: ${{ steps.vars.outputs.harbor-admin-password }}
      harbor-domain: ${{ steps.vars.outputs.harbor-domain }}
      b64-harbor-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-harbor-cluster-kubeconfig-contents }}
      b64-tap-build-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-tap-build-cluster-kubeconfig-contents }}
      b64-tap-iterate-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-tap-iterate-cluster-kubeconfig-contents }}
      b64-tap-view-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-tap-view-cluster-kubeconfig-contents }}
      b64-tap-run-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-tap-run-cluster-kubeconfig-contents }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: "Fetch secrets from secret manager instance"
      id: vars
      uses: ./docker/actions/azure/tanzu-cli-setup-action
      with:
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}
        azure-ad-client-id: ${{ secrets.AZURE_AD_CLIENT_ID }}
        azure-ad-client-secret: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        azure-ad-tenant-id: ${{ secrets.AZURE_AD_TENANT_ID }}
        command: |
          ACR_ADMIN_USERNAME=$(az keyvault secret show --name acr-admin-username --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "harbor-admin-username=$ACR_ADMIN_USERNAME" >> $GITHUB_OUTPUT \
          && ACR_ADMIN_PASSWORD=$(az keyvault secret show --name acr-admin-password --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "acr-admin-password=$ACR_ADMIN_PASSWORD" >> $GITHUB_OUTPUT \
          && ACR_URL=$(az keyvault secret show --name acr-url --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "acr-url=$ACR_URL" >> $GITHUB_OUTPUT \
          && HARBOR_ADMIN_USERNAME=$(az keyvault secret show --name harbor-admin-username --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "harbor-admin-username=$HARBOR_ADMIN_USERNAME" >> $GITHUB_OUTPUT \
          && HARBOR_ADMIN_PASSWORD=$(az keyvault secret show --name harbor-admin-password --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "harbor-admin-password=$HARBOR_ADMIN_PASSWORD" >> $GITHUB_OUTPUT \
          && HARBOR_DOMAIN=$(az keyvault secret show --name harbor-domain --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "harbor-domain=$HARBOR_DOMAIN" >> $GITHUB_OUTPUT \
          && HARBOR_KCONFIG=$(az keyvault secret show --name b64-harbor-cluster-kubeconfig --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "b64-harbor-cluster-kubeconfig-contents=$HARBOR_KCONFIG" >> $GITHUB_OUTPUT \
          && TAP_BUILD_KCONFIG=$(az keyvault secret show --name b64-tap-build-cluster-kubeconfig --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "b64-tap-build-cluster-kubeconfig-contents=$TAP_BUILD_KCONFIG" >> $GITHUB_OUTPUT \
          && TAP_ITERATE_KCONFIG=$(az keyvault secret show --name b64-tap-iterate-cluster-kubeconfig --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "b64-tap-iterate-cluster-kubeconfig-contents=$TAP_ITERATE_KCONFIG" >> $GITHUB_OUTPUT \
          && TAP_VIEW_KCONFIG=$(az keyvault secret show --name b64-tap-view-cluster-kubeconfig --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "b64-tap-view-cluster-kubeconfig-contents=$TAP_VIEW_KCONFIG" >> $GITHUB_OUTPUT \
          && TAP_RUN_KCONFIG=$(az keyvault secret show --name b64-tap-run-cluster-kubeconfig --vault-name ${{ github.event.inputs.secrets-manager-instance-name }} | jq -r .value) \
          && echo "b64-tap-run-cluster-kubeconfig-contents=$TAP_RUN_KCONFIG" >> $GITHUB_OUTPUT

  obtain-registry-creds:
    needs: obtain-secrets-from-secrets-manager
    runs-on: ubuntu-22.04

    outputs:
      container-image-registry-username: ${{ steps.vars.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ steps.vars.outputs.container-image-registry-password }}
      container-image-registry-url: ${{ steps.vars.outputs.container-image-registry-url }}
      ootb-supply-chain-repo: ${{ steps.vars.outputs.ootb-supply-chain-repo }}
      build-service-repo: ${{ steps.vars.outputs.build-service-repo }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: "Fetch secrets from secret manager instance"
      id: vars
      env:
        CONTAINER_IMAGE_REGISTRY_PROVIDER: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-provider }}
      run: |
        if [ "acr" == "$CONTAINER_IMAGE_REGISTRY_PROVIDER" ]; then
          echo "container-image-registry-username=${{ needs.obtain-secrets-from-secrets-manager.outputs.acr-admin-username }}" >> $GITHUB_OUTPUT
          echo "container-image-registry-password=${{ needs.obtain-secrets-from-secrets-manager.outputs.acr-admin-password }}" >> $GITHUB_OUTPUT
          echo "container-image-registry-url=${{ needs.obtain-secrets-from-secrets-manager.outputs.acr-url }}" >> $GITHUB_OUTPUT
          echo "build-service-repo=build-service" >> $GITHUB_OUTPUT
          echo "ootb-supply-chain-repo=supply-chain" >> $GITHUB_OUTPUT
        fi
        if [ "harbor" == "$CONTAINER_IMAGE_REGISTRY_PROVIDER" ]; then
          echo "container-image-registry-username=${{ needs.obtain-secrets-from-secrets-manager.outputs.harbor-admin-username }}" >> $GITHUB_OUTPUT
          echo "container-image-registry-password=${{ needs.obtain-secrets-from-secrets-manager.outputs.harbor-admin-password }}" >> $GITHUB_OUTPUT
          echo "container-image-registry-url=${{ needs.obtain-secrets-from-secrets-manager.outputs.harbor-domain }}" >> $GITHUB_OUTPUT
          echo "build-service-repo=tanzu/build-service" >> $GITHUB_OUTPUT
          echo "ootb-supply-chain-repo=tanzu/supply-chain" >> $GITHUB_OUTPUT
        fi

  assemble-domain-names:
    runs-on: ubuntu-22.04

    outputs:
      iterate-domain: ${{ steps.vars.outputs.iterate_domain }}
      view-domain: ${{ steps.vars.outputs.view_domain }}
      run-domain: ${{ steps.vars.outputs.run_domain }}

    steps:
      - uses: jungwinter/split@v2
        id: split
        with:
          msg: '${{ github.event.inputs.subdomains }}'
          separator: ','

      - name: Assemble fully-qualified domain names
        id: vars
        run: |
          echo "iterate_domain=${{ steps.split.outputs._0 }}.${{ github.event.inputs.domain }}" >> $GITHUB_OUTPUT
          echo "view_domain=${{ steps.split.outputs._1 }}.${{ github.event.inputs.domain }}" >> $GITHUB_OUTPUT
          echo "run_domain=${{ steps.split.outputs._2 }}.${{ github.event.inputs.domain }}" >> $GITHUB_OUTPUT

  determine-target-repo:
    runs-on: ubuntu-22.04

    env:
      CONTAINER_IMAGE_REGISTRY_PROVIDER: "${{ github.event.inputs.container-image-registry-provider }}"

    outputs:
      result: ${{ steps.vars.outputs.target_repo }}

    steps:
      - id: vars
        run: |
          case $CONTAINER_IMAGE_REGISTRY_PROVIDER in

            azure-container-registry)
              echo "target_repo=tanzu-application-platform" >> $GITHUB_OUTPUT
              ;;

            harbor-on-azure)
              echo "target_repo=tanzu" >> $GITHUB_OUTPUT
              ;;
          esac

  install-tap-build-on-azure:
    needs: [ obtain-secrets-from-secrets-manager,obtain-registry-creds,prepare-metadata-store-secrets,determine-target-repo ]
    uses: ./.github/workflows/install-tanzu-application-platform.yml
    with:
      domain: ${{ github.event.inputs.domain }}
      dev-namespace: ${{ github.event.inputs.dev-namespace }}
      backstage-catalog: ${{ github.event.inputs.backstage-catalog }}
      container-image-registry-url: ${{ needs.obtain-registry-creds.outputs.container-image-registry-url }}
      container-image-registry-username: ${{ needs.obtain-registry-creds.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ needs.obtain-registry-creds.outputs.container-image-registry-password }}
      ootb-supply-chain-repo: ${{ needs.obtain-registry-creds.outputs.ootb-supply-chain-repo }}
      build-service-repo: ${{ needs.obtain-registry-creds.outputs.build-service-repo }}
      email-address: ${{ github.event.inputs.email-address }}
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
      deployment-name: "tap"
      active-profile: "build"
      target-repo: ${{ needs.determine-target-repo.outputs.result }}
    secrets:
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      GIT_SSH_PRIVATE_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      GIT_SSH_PUBLIC_KEY: ${{ secrets.GIT_SSH_PUBLIC_KEY }}
      GIT_SSH_KNOWN_HOSTS: ${{ secrets.GIT_SSH_KNOWN_HOSTS }}
      AZURE_AD_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      AZURE_AD_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_AD_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-build-cluster-kubeconfig-contents }}
      OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
      OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
      OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}
      TANZU_NETWORK_USERNAME: ${{ secrets.TANZU_NETWORK_USERNAME }}
      TANZU_NETWORK_PASSWORD: ${{ secrets.TANZU_NETWORK_PASSWORD }}

  install-tap-iterate-on-azure:
    needs: [ obtain-secrets-from-secrets-manager,obtain-registry-creds,assemble-domain-names,determine-target-repo ]
    uses: ./.github/workflows/install-tanzu-application-platform.yml
    with:
      domain: ${{ needs.assemble-domain-names.outputs.iterate-domain }}
      dev-namespace: ${{ github.event.inputs.dev-namespace }}
      backstage-catalog: ${{ github.event.inputs.backstage-catalog }}
      container-image-registry-url: ${{ needs.obtain-registry-creds.outputs.container-image-registry-url }}
      container-image-registry-username: ${{ needs.obtain-registry-creds.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ needs.obtain-registry-creds.outputs.container-image-registry-password }}
      ootb-supply-chain-repo: ${{ needs.obtain-registry-creds.outputs.ootb-supply-chain-repo }}
      build-service-repo: ${{ needs.obtain-registry-creds.outputs.build-service-repo }}
      email-address: ${{ github.event.inputs.email-address }}
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
      deployment-name: "tap"
      active-profile: "iterate"
      target-repo: ${{ needs.determine-target-repo.outputs.result }}
    secrets:
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      GIT_SSH_PRIVATE_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      GIT_SSH_PUBLIC_KEY: ${{ secrets.GIT_SSH_PUBLIC_KEY }}
      GIT_SSH_KNOWN_HOSTS: ${{ secrets.GIT_SSH_KNOWN_HOSTS }}
      AZURE_AD_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      AZURE_AD_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_AD_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-iterate-cluster-kubeconfig-contents }}
      OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
      OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
      OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}
      TANZU_NETWORK_USERNAME: ${{ secrets.TANZU_NETWORK_USERNAME }}
      TANZU_NETWORK_PASSWORD: ${{ secrets.TANZU_NETWORK_PASSWORD }}

  install-tap-view-on-azure:
    needs: [ obtain-secrets-from-secrets-manager,obtain-registry-creds,assemble-domain-names,determine-target-repo ]
    uses: ./.github/workflows/install-tanzu-application-platform.yml
    with:
      domain: ${{ needs.assemble-domain-names.outputs.view-domain }}
      dev-namespace: ${{ github.event.inputs.dev-namespace }}
      backstage-catalog: ${{ github.event.inputs.backstage-catalog }}
      container-image-registry-url: ${{ needs.obtain-registry-creds.outputs.container-image-registry-url }}
      container-image-registry-username: ${{ needs.obtain-registry-creds.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ needs.obtain-registry-creds.outputs.container-image-registry-password }}
      ootb-supply-chain-repo: ${{ needs.obtain-registry-creds.outputs.ootb-supply-chain-repo }}
      build-service-repo: ${{ needs.obtain-registry-creds.outputs.build-service-repo }}
      email-address: ${{ github.event.inputs.email-address }}
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
      deployment-name: "tap"
      active-profile: "view"
      target-repo: ${{ needs.determine-target-repo.outputs.result }}
    secrets:
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      GIT_SSH_PRIVATE_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      GIT_SSH_PUBLIC_KEY: ${{ secrets.GIT_SSH_PUBLIC_KEY }}
      GIT_SSH_KNOWN_HOSTS: ${{ secrets.GIT_SSH_KNOWN_HOSTS }}
      AZURE_AD_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      AZURE_AD_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_AD_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-view-cluster-kubeconfig-contents }}
      OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
      OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
      OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}
      TANZU_NETWORK_USERNAME: ${{ secrets.TANZU_NETWORK_USERNAME }}
      TANZU_NETWORK_PASSWORD: ${{ secrets.TANZU_NETWORK_PASSWORD }}

  prepare-metadata-store-secrets:
    needs: [obtain-secrets-from-secrets-manager,install-tap-view-on-azure]
    uses: ./.github/workflows/prepare-metadata-store-secrets.yml
    with:
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
    secrets:
      AZURE_AD_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      AZURE_AD_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_AD_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      TAP_BUILD_KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-build-cluster-kubeconfig-contents }}
      TAP_VIEW_KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-view-cluster-kubeconfig-contents }}

  install-tap-run-on-azure:
    needs: [ obtain-secrets-from-secrets-manager,obtain-registry-creds,assemble-domain-names,determine-target-repo ]
    uses: ./.github/workflows/install-tanzu-application-platform.yml
    with:
      domain: ${{ needs.assemble-domain-names.outputs.run-domain }}
      dev-namespace: ${{ github.event.inputs.dev-namespace }}
      backstage-catalog: ${{ github.event.inputs.backstage-catalog }}
      container-image-registry-url: ${{ needs.obtain-registry-creds.outputs.container-image-registry-url }}
      container-image-registry-username: ${{ needs.obtain-registry-creds.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ needs.obtain-registry-creds.outputs.container-image-registry-password }}
      ootb-supply-chain-repo: ${{ needs.obtain-registry-creds.outputs.ootb-supply-chain-repo }}
      build-service-repo: ${{ needs.obtain-registry-creds.outputs.build-service-repo }}
      email-address: ${{ github.event.inputs.email-address }}
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
      deployment-name: "tap"
      active-profile: "run"
      target-repo: ${{ needs.determine-target-repo.outputs.result }}
    secrets:
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      GIT_SSH_PRIVATE_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      GIT_SSH_PUBLIC_KEY: ${{ secrets.GIT_SSH_PUBLIC_KEY }}
      GIT_SSH_KNOWN_HOSTS: ${{ secrets.GIT_SSH_KNOWN_HOSTS }}
      AZURE_AD_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      AZURE_AD_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_AD_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-run-cluster-kubeconfig-contents }}
      OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
      OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
      OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}
      TANZU_NETWORK_USERNAME: ${{ secrets.TANZU_NETWORK_USERNAME }}
      TANZU_NETWORK_PASSWORD: ${{ secrets.TANZU_NETWORK_PASSWORD }}
