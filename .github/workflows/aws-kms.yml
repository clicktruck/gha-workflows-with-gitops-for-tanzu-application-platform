name: "aws-01-administer-key-management-service"

on:
  workflow_call:
    inputs:
      alias:
        description: "A friendly name for a AWS KMS key.  (On destroy AWS_KMS_ALIAS secret value is used)."
        required: false
        type: string
      adminUsername:
        description: "KMS administrator user name"
        required: false
        type: string
      region:
        description: "The AWS region where the Key Management Service instance will be available"
        type: string
        required: true
      action:
        required: true
        type: string
        description: "Create (new) or destroy (existing)"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SESSION_TOKEN:
        required: false
      PA_TOKEN:
        required: true
      AWS_KMS_ALIAS:
        required: false

jobs:
  terraform:
    if: inputs.action == 'create'
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ inputs.region }}
      TF_VAR_alias: ${{ inputs.alias }}
      TF_VAR_admin_username: ${{ inputs.adminUserName }}
    runs-on: ubuntu-22.04

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-22.04, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/aws/kms

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      if: inputs.action == 'create'
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      if: inputs.action == 'create'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
        terraform_version: 1.4.6

    # Initialize a new or existing Terraform working directory by creating initial files, downloading modules, etc.
    - name: Terraform Init
      if: inputs.action == 'create'
      run: terraform init -upgrade

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      if: inputs.action == 'create'
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action == 'create'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action == 'create'
      run: terraform apply -auto-approve

  add-github-secret:
    if: inputs.action == 'create'
    needs: terraform
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Add KMS key id as secret
      env:
        GITHUB_TOKEN: ${{ secrets.PA_TOKEN }}
      run: |
        gh secret set AWS_KMS_ALIAS --body ${{ inputs.alias }}

  aws-cli:
    if: inputs.action == 'destroy'
    runs-on: ubuntu-22.04
    name: "Destroy KMS key with aws CLI"
    env:
      AWS_PAGER: ""
      AWS_KMS_ALIAS: ${{ secrets.AWS_KMS_ALIAS }}

    steps:
    - name: Configure AWS credentials
      if: inputs.action == 'destroy'
      uses: aws-actions/configure-aws-credentials@v3.0.1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ inputs.region }}

    - name: Destroy KMS key
      if: inputs.action == 'destroy'
      run: |
        aws kms list-aliases --no-paginate --query 'Aliases[?AliasName==`${{ env.AWS_KMS_ALIAS }}`].TargetKeyId' > kms-keyid.json
        KMS_KEY_ID=$(sed '2q;d' kms-keyid.json | tr -d '"' | tr -d " ")
        aws kms delete-alias --alias-name ${{ secrets.AWS_KMS_ALIAS }}
        aws kms schedule-key-deletion --key-id $KMS_KEY_ID
        rm -Rf kms-keyid.json
