name: "multi-cluster-tanzu-application-platform-install-on-aws-dispatch"

on:
  workflow_dispatch:
    inputs:
      cluster-provider:
        description: "The Kubernetes service provider"
        type: choice
        required: true
        options:
          - eks
          - tkg»aws
        default: "eks"
      container-image-registry-provider:
        description: "The container image registry provider"
        required: true
        type: choice
        options:
          - elastic-container-registry
          - harbor-on-aws
        default: "elastic-container-registry"
      secrets-manager-arn:
        description: "The ARN of an AWS Secrets Manager instance"
        required: true
      domain:
        description: "A domain that the installation of TAP will be addressable from"
        required: true
        default: "foo.com"
      subdomains:
        description: "Comma-separated list of subdomains for each cluster hosting iterate, view, and run TAP profiles"
        required: true
        default: "view,iterate,run"
      email-address:
        description: "An email address to be used as the owner for the public trusted domain certificate vended by Let's Encrypt"
        required: true
      aws-access-key-id:
        description: "AWS access key identifier for an account with write permissions to a Route53 hosted zone"
        required: true
      aws-secret-access-key:
        description: "AWS secret access key for an account with write permissions to a Route53 hosted zone"
        required: true
      backstage-catalog:
        description: "A Git repository and path to a Backstage catalog file"
        required: true
      region:
        description: "The AWS region where the Secrets Manager instance is available"
        required: true
        type: choice
        options:
        - us-east-1
        - us-east-2
        - us-west-2
        - af-south-1
        - ap-east-1
        - ap-south-1
        - ap-northeast-1
        - ap-northeast-2
        - ap-northeast-3
        - ap-southeast-1
        - ap-southeast-2
        - ca-central-1
        - eu-west-1
        - eu-west-2
        - eu-west-3
        - eu-north-1
        - eu-south-1
        - me-south-1
        - sa-east-1
        default: "us-west-2"

jobs:
  obtain-aws-account-id:
    runs-on: ubuntu-22.04

    outputs:
     account-id: ${{ steps.vars.outputs.account_id }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2.2.0
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ inputs.region }}
        mask-aws-account-id: false

    - name: Ask for account id
      id: vars
      run: |
        account_id=$(aws sts get-caller-identity --query "Account" --output text)
        echo "account_id=${account_id}" >> $GITHUB_OUTPUT

  obtain-secrets-from-secrets-manager:
    runs-on: ubuntu-22.04

    outputs:
      container-image-registry-provider: ${{ steps.vars.outputs.container-image-registry-provider }}
      container-image-registry-username: ${{ steps.vars.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ steps.vars.outputs.container-image-registry-password }}
      container-image-registry-url: ${{ steps.vars.outputs.container-image-registry-url }}
      build-service-repo: ${{ steps.vars.outputs.build-service-repo }}
      ootb-supply-chain-repo: ${{ steps.vars.outputs.ootb-supply-chain-repo }}
      b64-harbor-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-harbor-cluster-kubeconfig-contents }}
      b64-tap-build-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-tap-build-cluster-kubeconfig-contents }}
      b64-tap-iterate-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-tap-iterate-cluster-kubeconfig-contents }}
      b64-tap-view-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-tap-view-cluster-kubeconfig-contents }}
      b64-tap-run-cluster-kubeconfig-contents: ${{ steps.vars.outputs.b64-tap-run-cluster-kubeconfig-contents }}
      tap-build-cluster-name: ${{ steps.vars.outputs.tap-build-cluster-name }}
      tap-iterate-cluster-name: ${{ steps.vars.outputs.tap-iterate-cluster-name }}
      tap-view-cluster-name: ${{ steps.vars.outputs.tap-view-cluster-name }}
      tap-run-cluster-name: ${{ steps.vars.outputs.tap-run-cluster-name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: "Fetch secrets from secret manager instance"
      id: obtain-secret-valuemap
      uses: ./docker/actions/aws/tanzu-cli-setup-action
      with:
        csp-api-token: ${{ secrets.CSP_API_TOKEN }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        command: export ENCODED_KVMAP=$(aws secretsmanager get-secret-value --secret-id ${{ github.event.inputs.secrets-manager-arn }} --region ${{ github.event.inputs.region }} --query 'SecretString' | tr -d '\\' | sed -e 's/^"//' -e 's/"$//' | base64 -w 0)
        query-for-output: "echo $ENCODED_KVMAP"

    - name: 🏗 Set up yq
      uses: frenck/action-setup-yq@v1

    - name: Set output variables
      id: vars
      run: |
        KVMAP=$(echo ${{ steps.obtain-secret-valuemap.outputs.result }} | base64 -d)
        CONTAINER_IMAGE_REGISTRY_PROVIDER=$(echo $KVMAP | yq -p=json -M '.container-image-registry-provider')
        echo "container-image-registry-provider=$CONTAINER_IMAGE_REGISTRY_PROVIDER" >> $GITHUB_OUTPUT
        if [ "ecr" == "$CONTAINER_IMAGE_REGISTRY_PROVIDER" ]; then
          ECR_ADMIN_USERNAME=$(echo $KVMAP | yq -p=json -M '.ecr-admin-username')
          echo "container-image-registry-username=$ECR_ADMIN_USERNAME" >> $GITHUB_OUTPUT
          ECR_ADMIN_PASSWORD=$(echo $KVMAP | yq -p=json -M '.ecr-admin-password')
          echo "container-image-registry-password=$ECR_ADMIN_PASSWORD" >> $GITHUB_OUTPUT
          ECR_ENDPOINT=$(echo $KVMAP | yq -p=json -M '.ecr-endpoint')
          echo "container-image-registry-url=$ECR_ENDPOINT" >> $GITHUB_OUTPUT
          echo "build-service-repo=tap-build-service" >> $GITHUB_OUTPUT
          echo "ootb-supply-chain-repo=tanzu-application-platform" >> $GITHUB_OUTPUT
        fi
        if [ "harbor" == "$CONTAINER_IMAGE_REGISTRY_PROVIDER" ]; then
          HARBOR_ADMIN_USERNAME=$(echo $KVMAP | yq -p=json -M '.harbor-admin-username')
          echo "container-image-registry-username=$HARBOR_ADMIN_USERNAME" >> $GITHUB_OUTPUT
          HARBOR_ADMIN_PASSWORD=$(echo $KVMAP | yq -p=json -M '.harbor-admin-password')
          echo "container-image-registry-password=$HARBOR_ADMIN_PASSWORD" >> $GITHUB_OUTPUT
          HARBOR_DOMAIN=$(echo $KVMAP | yq -p=json -M '.harbor-domain')
          echo "container-image-registry-url=$HARBOR_DOMAIN" >> $GITHUB_OUTPUT
          echo "build-service-repo=tanzu/build-service" >> $GITHUB_OUTPUT
          echo "ootb-supply-chain-repo=tanzu/supply-chain" >> $GITHUB_OUTPUT
        fi
        HARBOR_KCONFIG=$(echo $KVMAP | yq -p=json -M '.b64-harbor-cluster-kubeconfig')
        echo "b64-harbor-cluster-kubeconfig-contents=$HARBOR_KCONFIG" >> $GITHUB_OUTPUT
        TAP_BUILD_KCONFIG=$(echo $KVMAP | yq -p=json -M '.b64-tap-build-cluster-kubeconfig')
        echo "b64-tap-build-cluster-kubeconfig-contents=$TAP_BUILD_KCONFIG" >> $GITHUB_OUTPUT
        TAP_BUILD_CLUSTER_NAME=$(echo "$TAP_BUILD_KCONFIG" | base64 -d > build_config && kubectl config current-context --kubeconfig build_config | cut -d "/" -f2)
        echo "tap-build-cluster-name=$TAP_BUILD_CLUSTER_NAME" >> $GITHUB_OUTPUT
        TAP_ITERATE_KCONFIG=$(echo $KVMAP | yq -p=json -M '.b64-tap-iterate-cluster-kubeconfig')
        echo "b64-tap-iterate-cluster-kubeconfig-contents=$TAP_ITERATE_KCONFIG" >> $GITHUB_OUTPUT
        TAP_ITERATE_CLUSTER_NAME=$(echo "$TAP_ITERATE_KCONFIG" | base64 -d > iterate_config && kubectl config current-context --kubeconfig iterate_config | cut -d "/" -f2)
        echo "tap-iterate-cluster-name=$TAP_ITERATE_CLUSTER_NAME" >> $GITHUB_OUTPUT
        TAP_VIEW_KCONFIG=$(echo $KVMAP | yq -p=json -M '.b64-tap-view-cluster-kubeconfig')
        echo "b64-tap-view-cluster-kubeconfig-contents=$TAP_VIEW_KCONFIG" >> $GITHUB_OUTPUT
        TAP_VIEW_CLUSTER_NAME=$(echo "$TAP_VIEW_KCONFIG" | base64 -d > view_config && kubectl config current-context --kubeconfig view_config | cut -d "/" -f2)
        echo "tap-view-cluster-name=$TAP_VIEW_CLUSTER_NAME" >> $GITHUB_OUTPUT
        TAP_RUN_KCONFIG=$(echo $KVMAP | yq -p=json -M '.b64-tap-run-cluster-kubeconfig')
        echo "b64-tap-run-cluster-kubeconfig-contents=$TAP_RUN_KCONFIG" >> $GITHUB_OUTPUT
        TAP_RUN_CLUSTER_NAME=$(echo "$TAP_RUN_KCONFIG" | base64 -d > run_config && kubectl config current-context --kubeconfig run_config | cut -d "/" -f2)
        echo "tap-run-cluster-name=$TAP_RUN_CLUSTER_NAME" >> $GITHUB_OUTPUT

  assemble-domain-names:
    runs-on: ubuntu-22.04

    outputs:
      iterate-domain: ${{ steps.vars.outputs.iterate_domain }}
      view-domain: ${{ steps.vars.outputs.view_domain }}
      run-domain: ${{ steps.vars.outputs.run_domain }}

    steps:
      - uses: jungwinter/split@v2
        id: split
        with:
          msg: '${{ github.event.inputs.subdomains }}'
          separator: ','

      - name: Assemble fully-qualified domain names
        id: vars
        run: |
          echo "iterate_domain=${{ steps.split.outputs._0 }}.${{ github.event.inputs.domain }}" >> $GITHUB_OUTPUT
          echo "view_domain=${{ steps.split.outputs._1 }}.${{ github.event.inputs.domain }}" >> $GITHUB_OUTPUT
          echo "run_domain=${{ steps.split.outputs._2 }}.${{ github.event.inputs.domain }}" >> $GITHUB_OUTPUT

  determine-target-repo:
    runs-on: ubuntu-22.04

    env:
      CONTAINER_IMAGE_REGISTRY_PROVIDER: "${{ github.event.inputs.container-image-registry-provider }}"

    outputs:
      result: ${{ steps.vars.outputs.target_repo }}

    steps:
      - id: vars
        run: |
          case $CONTAINER_IMAGE_REGISTRY_PROVIDER in

            elastic-container-registry)
              echo "target_repo=tap-images" >> $GITHUB_OUTPUT
              ;;

            harbor-on-aws)
              echo "target_repo=tanzu" >> $GITHUB_OUTPUT
              ;;
          esac

  install-tap-build-on-aws:
    needs: [ obtain-aws-account-id,obtain-secrets-from-secrets-manager,prepare-metadata-store-secrets,determine-target-repo ]
    uses: ./.github/workflows/install-tanzu-application-platform.yml
    with:
      aws-region: ${{ github.event.inputs.region }}
      domain: ${{ github.event.inputs.domain }}
      dev-namespace: demo
      backstage-catalog: ${{ github.event.inputs.backstage-catalog }}
      container-image-registry-url: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-url }}
      container-image-registry-username: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-password }}
      ootb-supply-chain-repo: ${{ needs.obtain-secrets-from-secrets-manager.outputs.ootb-supply-chain-repo }}
      build-service-repo: ${{ needs.obtain-secrets-from-secrets-manager.outputs.build-service-repo }}
      build-service-repo-aws-iam-role-arn: "arn:aws:iam::${{ needs.obtain-aws-account-id.outputs.account-id }}:role/tap-build-service-for-${{ needs.obtain-secrets-from-secrets-manager.outputs.tap-build-cluster-name }}"
      workload-repo-aws-iam-role-arn: "arn:aws:iam::${{ needs.obtain-aws-account-id.outputs.account-id }}:role/tap-workload-for-${{ needs.obtain-secrets-from-secrets-manager.outputs.tap-build-cluster-name }}"
      email-address: ${{ github.event.inputs.email-address }}
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
      deployment-name: "tap"
      active-profile: "build"
      target-repo: ${{ needs.determine-target-repo.outputs.result }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-build-cluster-kubeconfig-contents }}
      GIT_SSH_PRIVATE_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      GIT_SSH_PUBLIC_KEY: ${{ secrets.GIT_SSH_PUBLIC_KEY }}
      GIT_SSH_KNOWN_HOSTS: ${{ secrets.GIT_SSH_KNOWN_HOSTS }}
      OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
      OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
      OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}
      ROUTE53_ZONE_AWS_ACCESS_KEY_ID: ${{ github.event.inputs.aws-access-key-id }}
      ROUTE53_ZONE_AWS_SECRET_ACCESS_KEY: ${{ github.event.inputs.aws-secret-access-key }}
      TANZU_NETWORK_USERNAME: ${{ secrets.TANZU_NETWORK_USERNAME }}
      TANZU_NETWORK_PASSWORD: ${{ secrets.TANZU_NETWORK_PASSWORD }}

  install-tap-iterate-on-aws:
    needs: [ obtain-aws-account-id,obtain-secrets-from-secrets-manager,assemble-domain-names,determine-target-repo ]
    uses: ./.github/workflows/install-tanzu-application-platform.yml
    with:
      aws-region: ${{ github.event.inputs.region }}
      domain: ${{ needs.assemble-domain-names.outputs.iterate-domain }}
      dev-namespace: demo
      backstage-catalog: ${{ github.event.inputs.backstage-catalog }}
      container-image-registry-url: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-url }}
      container-image-registry-username: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-password }}
      ootb-supply-chain-repo: ${{ needs.obtain-secrets-from-secrets-manager.outputs.ootb-supply-chain-repo }}
      build-service-repo: ${{ needs.obtain-secrets-from-secrets-manager.outputs.build-service-repo }}
      build-service-repo-aws-iam-role-arn: "arn:aws:iam::${{ needs.obtain-aws-account-id.outputs.account-id }}:role/tap-build-service-for-${{ needs.obtain-secrets-from-secrets-manager.outputs.tap-iterate-cluster-name }}"
      workload-repo-aws-iam-role-arn: "arn:aws:iam::${{ needs.obtain-aws-account-id.outputs.account-id }}:role/tap-workload-for-${{ needs.obtain-secrets-from-secrets-manager.outputs.tap-iterate-cluster-name }}"
      email-address: ${{ github.event.inputs.email-address }}
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
      deployment-name: "tap"
      active-profile: "iterate"
      target-repo: ${{ needs.determine-target-repo.outputs.result }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-iterate-cluster-kubeconfig-contents }}
      GIT_SSH_PRIVATE_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      GIT_SSH_PUBLIC_KEY: ${{ secrets.GIT_SSH_PUBLIC_KEY }}
      GIT_SSH_KNOWN_HOSTS: ${{ secrets.GIT_SSH_KNOWN_HOSTS }}
      OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
      OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
      OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}
      ROUTE53_ZONE_AWS_ACCESS_KEY_ID: ${{ github.event.inputs.aws-access-key-id }}
      ROUTE53_ZONE_AWS_SECRET_ACCESS_KEY: ${{ github.event.inputs.aws-secret-access-key }}
      TANZU_NETWORK_USERNAME: ${{ secrets.TANZU_NETWORK_USERNAME }}
      TANZU_NETWORK_PASSWORD: ${{ secrets.TANZU_NETWORK_PASSWORD }}

  install-tap-view-on-aws:
    needs: [ obtain-aws-account-id,obtain-secrets-from-secrets-manager,assemble-domain-names,determine-target-repo ]
    uses: ./.github/workflows/install-tanzu-application-platform.yml
    with:
      aws-region: ${{ github.event.inputs.region }}
      domain: ${{ needs.assemble-domain-names.outputs.view-domain }}
      dev-namespace: demo
      backstage-catalog: ${{ github.event.inputs.backstage-catalog }}
      container-image-registry-url: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-url }}
      container-image-registry-username: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-password }}
      ootb-supply-chain-repo: ${{ needs.obtain-secrets-from-secrets-manager.outputs.ootb-supply-chain-repo }}
      build-service-repo: ${{ needs.obtain-secrets-from-secrets-manager.outputs.build-service-repo }}
      build-service-repo-aws-iam-role-arn: "arn:aws:iam::${{ needs.obtain-aws-account-id.outputs.account-id }}:role/tap-build-service-for-${{ needs.obtain-secrets-from-secrets-manager.outputs.tap-view-cluster-name }}"
      workload-repo-aws-iam-role-arn: "arn:aws:iam::${{ needs.obtain-aws-account-id.outputs.account-id }}:role/tap-workload-for-${{ needs.obtain-secrets-from-secrets-manager.outputs.tap-view-cluster-name }}"
      email-address: ${{ github.event.inputs.email-address }}
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
      deployment-name: "tap"
      active-profile: "view"
      target-repo: ${{ needs.determine-target-repo.outputs.result }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-view-cluster-kubeconfig-contents }}
      GIT_SSH_PRIVATE_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      GIT_SSH_PUBLIC_KEY: ${{ secrets.GIT_SSH_PUBLIC_KEY }}
      GIT_SSH_KNOWN_HOSTS: ${{ secrets.GIT_SSH_KNOWN_HOSTS }}
      OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
      OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
      OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}
      ROUTE53_ZONE_AWS_ACCESS_KEY_ID: ${{ github.event.inputs.aws-access-key-id }}
      ROUTE53_ZONE_AWS_SECRET_ACCESS_KEY: ${{ github.event.inputs.aws-secret-access-key }}
      TANZU_NETWORK_USERNAME: ${{ secrets.TANZU_NETWORK_USERNAME }}
      TANZU_NETWORK_PASSWORD: ${{ secrets.TANZU_NETWORK_PASSWORD }}

  prepare-metadata-store-secrets:
    needs: [obtain-secrets-from-secrets-manager,install-tap-view-on-aws]
    uses: ./.github/workflows/prepare-metadata-store-secrets.yml
    with:
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      TAP_BUILD_KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-build-cluster-kubeconfig-contents }}
      TAP_VIEW_KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-view-cluster-kubeconfig-contents }}

  install-tap-run-on-aws:
    needs: [ obtain-aws-account-id,obtain-secrets-from-secrets-manager,assemble-domain-names,determine-target-repo ]
    uses: ./.github/workflows/install-tanzu-application-platform.yml
    with:
      aws-region: ${{ github.event.inputs.region }}
      domain: ${{ needs.assemble-domain-names.outputs.run-domain }}
      dev-namespace: demo
      backstage-catalog: ${{ github.event.inputs.backstage-catalog }}
      container-image-registry-url: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-url }}
      container-image-registry-username: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-username }}
      container-image-registry-password: ${{ needs.obtain-secrets-from-secrets-manager.outputs.container-image-registry-password }}
      ootb-supply-chain-repo: ${{ needs.obtain-secrets-from-secrets-manager.outputs.ootb-supply-chain-repo }}
      build-service-repo: ${{ needs.obtain-secrets-from-secrets-manager.outputs.build-service-repo }}
      build-service-repo-aws-iam-role-arn: "arn:aws:iam::${{ needs.obtain-aws-account-id.outputs.account-id }}:role/tap-build-service-for-${{ needs.obtain-secrets-from-secrets-manager.outputs.tap-run-cluster-name }}"
      workload-repo-aws-iam-role-arn: "arn:aws:iam::${{ needs.obtain-aws-account-id.outputs.account-id }}:role/tap-workload-for-${{ needs.obtain-secrets-from-secrets-manager.outputs.tap-run-cluster-name }}"
      email-address: ${{ github.event.inputs.email-address }}
      cluster-provider: ${{ github.event.inputs.cluster-provider }}
      deployment-name: "tap"
      active-profile: "run"
      target-repo: ${{ needs.determine-target-repo.outputs.result }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      CSP_API_TOKEN: ${{ secrets.CSP_API_TOKEN }}
      KUBECONFIG_CONTENTS: ${{ needs.obtain-secrets-from-secrets-manager.outputs.b64-tap-run-cluster-kubeconfig-contents }}
      GIT_SSH_PRIVATE_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
      GIT_SSH_PUBLIC_KEY: ${{ secrets.GIT_SSH_PUBLIC_KEY }}
      GIT_SSH_KNOWN_HOSTS: ${{ secrets.GIT_SSH_KNOWN_HOSTS }}
      OIDC_AUTH_PROVIDER: ${{ secrets.OIDC_AUTH_PROVIDER }}
      OIDC_AUTH_CLIENT_ID: ${{ secrets.OIDC_AUTH_CLIENT_ID }}
      OIDC_AUTH_CLIENT_SECRET: ${{ secrets.OIDC_AUTH_CLIENT_SECRET }}
      PA_TOKEN: ${{ secrets.PA_TOKEN }}
      ROUTE53_ZONE_AWS_ACCESS_KEY_ID: ${{ github.event.inputs.aws-access-key-id }}
      ROUTE53_ZONE_AWS_SECRET_ACCESS_KEY: ${{ github.event.inputs.aws-secret-access-key }}
      TANZU_NETWORK_USERNAME: ${{ secrets.TANZU_NETWORK_USERNAME }}
      TANZU_NETWORK_PASSWORD: ${{ secrets.TANZU_NETWORK_PASSWORD }}
