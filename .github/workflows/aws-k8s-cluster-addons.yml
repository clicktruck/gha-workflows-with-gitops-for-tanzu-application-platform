name: "aws-06a-elastic-kubernetes-service-addons"

on:
  workflow_call:
    inputs:
      cluster-id:
        description: "Id of the EKS cluster where add-ons will be installed"
        type: string
        required: true
      cluster-name:
        description: "Name of the EKS cluster where add-ons will be installed"
        type: string
        required: true
      cluster-endpoint:
        description: "Endpoint for the cluster's Kubernetes API server"
        type: string
        required: true
      k8s-version:
        description: "A supported and available Kubernetes (major.minor) version"
        type: string
        required: true
      oidc-provider:
        description: "The OpenID Connect identity provider (issuer URL without leading `https://`)"
        type: string
        required: true
      region:
        description: "The AWS region where the EKS cluster will be created"
        required: true
        type: string
      action:
        required: true
        type: string
        description: "Install (new) or remove (existing)"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SESSION_TOKEN:
        required: false
      TF_BACKEND_s3_bucket_name:
        required: true
      AWS_KMS_ALIAS:
        required: true
      KUBECONFIG_CONTENTS:
        required: true

jobs:
  manage-addons:
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ inputs.region }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      TF_VAR_eks_cluster_id: ${{ inputs.cluster-id }}
      TF_VAR_eks_cluster_version: "${{ inputs.k8s-version }}"
      TF_VAR_eks_cluster_endpoint: "${{ inputs.cluster-endpoint }}"
      TF_VAR_oidc_provider: "${{ inputs.oidc-provider }}"
      TF_VAR_kubeconfig_path: "/tmp/.kube/config"
      KUBECONFIG: "/tmp/.kube/config"

    runs-on: ubuntu-20.04


    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-20.04, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/aws/cluster-addons

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
        terraform_version: 1.3.7

    - name: Generate backend configuration
      run: |
        cp ../backend/backend.tf .
        echo "bucket = \"${{ secrets.TF_BACKEND_s3_bucket_name }}\"" > config.aws.tfbackend
        echo "key = \"cluster-addons/${{ inputs.cluster-name }}/terraform.tfstate\"" >> config.aws.tfbackend
        echo "region = \"${{ env.AWS_REGION }}\"" >> config.aws.tfbackend
        echo "encrypt = true" >> config.aws.tfbackend
        echo "kms_key_id = \"${{ secrets.AWS_KMS_ALIAS }}\"" >> config.aws.tfbackend
        echo "dynamodb_table = \"${{ secrets.TF_BACKEND_s3_bucket_name }}\"" >> config.aws.tfbackend

    - name: Generate .kube/config
      env:
        KUBECONFIG_CONTENTS: ${{ secrets.KUBECONFIG_CONTENTS }}
      run: |
        mkdir -p /tmp/.kube
        echo "$KUBECONFIG_CONTENTS" | base64 -d > /tmp/.kube/config
        chmod 600 /tmp/.kube/config

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -upgrade -backend-config=./config.aws.tfbackend

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action == 'install'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action == 'install'
      run: terraform apply -auto-approve

    - name: Terraform Destroy
      if: inputs.action == 'remove'
      run: |
        terraform destroy -auto-approve
