name: "azure-03-administer-virtual-network"

on:
  workflow_call:
    inputs:
      resourceGroupName:
        description: "The name of an existing resource group"
        required: true
        type: string
      virtualNetworkCidr:
        description: "The Virtual Network CIDR block (e.g., 10.1.0.0/16)"
        required: true
        type: string
      operatorSubnetCidr:
        description: "The Subnet CIDR block for operator resources (e.g., 10.1.0.0/24)"
        required: true
        type: string
      aksSubnetCidr:
        description: "The Subnet CIDR block hosting AKS cluster (e.g., 10.1.128.0/22)"
        required: true
        type: string
      agwSubnetCidr:
        description: "The Subnet CIDR block hosting the Application Ingress Gateway (e.g., 10.1.1.0/24)"
        required: true
        type: string
      action:
        required: true
        type: string
        description: "Create (new) or destroy (existing)"
    secrets:
      AZURE_AD_CLIENT_ID:
        required: true
      AZURE_AD_CLIENT_SECRET:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true
      AZURE_AD_TENANT_ID:
        required: true
      TF_BACKEND_RESOURCE_GROUP_NAME:
        required: true
      TF_BACKEND_STORAGE_ACCOUNT_NAME:
        required: true
      TF_BACKEND_STORAGE_CONTAINER_NAME:
        required: true
    outputs:
      vnet_suffix:
        value: ${{ jobs.terraform.outputs.vnet_suffix }}
      ingress_application_gateway_name:
        value: ${{ jobs.terraform.outputs.ingress_application_gateway_name }}

jobs:
  terraform:
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_VAR_resource_group_name: ${{ inputs.resourceGroupName }}
      TF_VAR_vnet_cidr: ${{ inputs.virtualNetworkCidr }}
      TF_VAR_operator_subnet_cidr: ${{ inputs.operatorSubnetCidr }}
      TF_VAR_aks_subnet_cidr: ${{ inputs.aksSubnetCidr }}
      TF_VAR_agw_subnet_cidr: ${{ inputs.agwSubnetCidr }}
    runs-on: ubuntu-22.04

    outputs:
      vnet_suffix: ${{ steps.set_outputs.outputs.vnet_suffix }}
      ingress_application_gateway_name: ${{ steps.set_outputs.outputs.ingress_application_gateway_name }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-22.04, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: terraform/azure/virtual-network

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
        terraform_version: 1.5.3

    - name: Generate backend configuration
      run: |
          cp ../backend/backend.tf .
          echo "resource_group_name = \"${{ secrets.TF_BACKEND_RESOURCE_GROUP_NAME }}\"" > config.azurerm.tfbackend
          echo "storage_account_name = \"${{ secrets.TF_BACKEND_STORAGE_ACCOUNT_NAME }}\"" >> config.azurerm.tfbackend
          echo "container_name = \"${{ secrets.TF_BACKEND_STORAGE_CONTAINER_NAME }}\"" >> config.azurerm.tfbackend
          echo "key = \"${{ inputs.resourceGroupName }}.vnet.tfstate\"" >> config.azurerm.tfbackend

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -upgrade -backend-config=./config.azurerm.tfbackend

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      if: inputs.action == 'create'
      run: terraform plan

    - name: Terraform Apply
      if: inputs.action == 'create'
      run: terraform apply -auto-approve

    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve

    - name: Set Outputs
      id: set_outputs
      if: inputs.action == 'create'
      run: |
        vnet_suffix=$(terraform output --raw vnet_suffix)
        echo "vnet_suffix=${vnet_suffix}" >> $GITHUB_OUTPUT
        ingress_application_gateway_name=$(terraform output --raw ingress_application_gateway_name)
        echo "ingress_application_gateway_name=${ingress_application_gateway_name}" >> $GITHUB_OUTPUT
